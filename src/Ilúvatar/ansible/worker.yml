- hosts: workers
  vars:
    expected: "Connection failure: [Errno 104] Connection reset by peer"
    host_group: "{{ groups['workers'] }}"
    worker_index_base: 0
    assigned_port: "{{ (worker.port + host_group.index(inventory_hostname)) }}"
    exe_dest: "/tmp/{{ worker.bin_name }}"
    config_dest: "/tmp/{{ inventory_hostname }}.json"
  vars_files:
    - group_vars/all.yml

  tasks:
  - name: Get running worker process
    shell: "ps -ef | grep -v grep | grep -w {{ worker.bin_name }} | awk '{print $2}'"
    register: running_worker

  # - name: debug print
  #   when: ansible_host == "127.0.0.1" or ansible_host == "localhost"
  #   run_once: true
  #   debug:
  #     msg: "{{ ansible_host }}"

  - name: Kill running worker process on localhost
    shell: "kill {{ item }}"
    with_items: "{{ running_worker.stdout_lines }}"
    become: yes
    when: ansible_host == "127.0.0.1" or ansible_host == "localhost"
    run_once: true

  - name: Kill running worker process distrib
    shell: "kill {{ item }}"
    when: ansible_host != "127.0.0.1" and ansible_host != "localhost"
    with_items: "{{ running_worker.stdout_lines }}"
    become: yes

  - name: copy worker executable
    ansible.builtin.copy:
      src: "{{ilúvatar_home}}/target/release/{{worker.bin_name}}"
      dest: "{{exe_dest}}"
      mode: "preserve"

  - name: copy worker config
    ansible.builtin.copy:
      src: "{{ilúvatar_home}}/target/release/{{worker.config_name}}"
      dest: "{{config_dest}}"
      mode: "preserve"

  - name: clean localhost
    ansible.builtin.command: 
      argv: 
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
        - clean
    become: yes
    when: ansible_host == "127.0.0.1" or ansible_host == "localhost"
    run_once: true

  - name: clean distrib host
    ansible.builtin.command: 
      argv: 
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
        - clean
    become: yes

  - name: run worker executable
    ansible.builtin.command: 
      argv: 
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
    become: yes
    async: 2592000               # 60*60*24*30 – 1 month
    poll: 0
    when: mode != "clean"
    environment:
      "ILUVATAR_WORKER__name": "{{ inventory_hostname }}"
      "ILUVATAR_WORKER__port": "{{ assigned_port }}"
      "ILUVATAR_WORKER__logging__basename": "worker_{{ inventory_hostname }}"
      "ILUVATAR_WORKER__logging__level": "debug"
      "ILUVATAR_WORKER__load_balancer_url" : "http://{{ controller.host }}:{{ controller.port }}"
      "ILUVATAR_WORKER__graphite__address" : "{{ graphite.address }}"
      "ILUVATAR_WORKER__graphite__ingestion_port" : "{{ graphite.ingestion_port }}"
      "ILUVATAR_WORKER__graphite__ingestion_udp" : "{{ graphite.ingestion_udp }}"

  - name: wait until the worker on this host is up and running
    ansible.builtin.uri:
      url:
        "http://{{ansible_host}}:{{assigned_port}}/ping"
      validate_certs: "no"
      # RPC server doesn't accept basic HTTP connections
      # but we can try connecting to it once it's up and know it's alive
      status_code: [-1, 0.9, 1.1]
    register: result
    until: result.msg == expected
    retries: 10
    delay: 5
    when: mode != "clean"
