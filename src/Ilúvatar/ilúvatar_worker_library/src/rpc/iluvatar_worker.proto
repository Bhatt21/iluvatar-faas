syntax = "proto3";

package iluvatar_worker;

message PingRequest {
  string message = 1;
  string transaction_id = 2;
}

message PingResponse {
  string message = 1;
}

message InvokeRequest {
  string function_name = 1;
  string function_version = 2;
  int64 memory = 3;
  string json_args = 4;
  string transaction_id = 5;
}

message InvokeResponse {
  string json_result = 1;
  bool success = 2;
  uint64 duration_ms = 3;
}

message InvokeAsyncRequest {
  string function_name = 1;
  string function_version = 2;
  int64 memory = 3;
  string json_args = 4;
  string transaction_id = 5;
}
message InvokeAsyncResponse {
  string lookup_cookie = 1;
  bool success = 2;
}
message InvokeAsyncLookupRequest {
  string lookup_cookie = 1;
  string transaction_id = 2;
}

message PrewarmRequest {
  string function_name = 1;
  string function_version = 2;
  int64 memory = 3;
  uint32 cpu = 4;
  string image_name = 5;
  string transaction_id = 6;
}
message PrewarmResponse {
  bool success = 1;
  string message = 2;
}

message RegisterRequest {
  string function_name = 1;
  string function_version = 2;
  string image_name = 3;
  int64 memory = 4;
  uint32 cpus = 5;
  uint32 parallel_invokes = 6;
  string transaction_id = 7;
}

message RegisterResponse {
  bool success = 1;
  string function_json_result = 2;
}

message StatusRequest {
  string transaction_id = 1;
}

message StatusResponse {
  bool success = 1;
  int64 queue_len = 2;
  int64 used_mem = 3;
  int64 total_mem = 4;
  int64 cpu_us = 5;
  int64 cpu_sy = 6;
  int64 cpu_id = 7;
  int64 cpu_wa = 8;
  double load_avg_1minute = 9;
  uint32 num_system_cores = 10;
  uint32 num_running_funcs = 11;
}

message HealthRequest {
  string transaction_id = 1;
}

enum RpcHealthStatus {
  HEALTHY = 0;
  UNHEALTHY = 1;
}
message HealthResponse {
  RpcHealthStatus status = 1;
}

service IluvatarWorker {
  rpc ping(PingRequest) returns (PingResponse) {}
  rpc prewarm(PrewarmRequest) returns (PrewarmResponse) {}
  rpc invoke(InvokeRequest) returns (InvokeResponse) {}
  rpc invoke_async(InvokeAsyncRequest) returns (InvokeAsyncResponse) {}
  rpc invoke_async_check(InvokeAsyncLookupRequest) returns (InvokeResponse) {}
  rpc register(RegisterRequest) returns (RegisterResponse) {}
  rpc health(HealthRequest) returns (HealthResponse) {}
  rpc status(StatusRequest) returns (StatusResponse) {}
}
